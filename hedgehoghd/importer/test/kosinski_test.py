import unittest
import array
import spike.kosinski

TERMINATOR = [0x02, 0x00, 0x00, 0x00, 0x00]

# These testcases game from http://www.segaretro.org/Kosinski_compression,
# and they are WRONG.  Most of them assume lazy loading of new descriptors,
# and the actual Sega implementation uses greedy loading. (took my quite a while
# and some help to figure that one out).

class KosinskiTest(unittest.TestCase):
    def setUp(self):
        self.kos = spike.kosinski.Kosinski()

    def testByteReverse(self):
        # 11110000 -> 00001111
        self.assertEquals(0x0F, spike.kosinski.reverse(0xF0))
        # 10101010 -> 01010101
        self.assertEquals(0x55, spike.kosinski.reverse(0xAA))

    def testAllUncompressed(self):
        self.assertEquals([0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f],  self.kos.decompress(array.array('B',[0xff, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f] + TERMINATOR)).tolist())

    def testAllUncompressedTwice(self):
        self.assertEquals([0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f],  self.kos.decompress(array.array('B',[0xff, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0xff, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f] + TERMINATOR)).tolist())

    def testSimpleInlineRLE(self):
        # the original inline RLE example given on Sega Retro (http://www.segaretro.org/Kosinski_compression) appears to have an extra
        # byte, giving 12 uncompressed bytes after the inline RLE run of 0x25.  However, there are only 11 more descriptor bits left, thus only
        # indicating 11 bits.  I have removed the extra byte, since it appears to have been erroneous.


        self.assertEquals([0x25, 0x25, 0x25, 0x25, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B], self.kos.decompress(array.array('B',[0xF1, 0xFF, 0x25, 0xFF, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B] + TERMINATOR)).tolist())

    # rather than decompressing only a single block, verify that we can process a stream of blocks and notice when it ends
    # 0x02, 0x00 (descriptor with only a 01 separate RLE indicator) followed by three null bytes (null separate RLE indicator which means EOS) is a simple byte-aligned EOS
    def testStream(self):
        
        self.assertEquals([0x25, 0x25, 0x25, 0x25, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B], self.kos.decompress(array.array('B',[0xF1, 0xFF, 0x25, 0xFF, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x02, 0x00, 0x00, 0x00, 0x00])).tolist())

    def testStreamWithSeparateRLE(self):
        self.assertEquals([0x54, 0x3B, 0xC4, 0x44, 0x54, 0x33, 0x33, 0x5B, 0x2D, 0x5C, 0x44, 0x5C, 0xC4, 0xC5, 0xC4, 0xC5, 0xC3, 0x44, 0x78, 0x88, 0x98, 0x44, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30], self.kos.decompress(array.array('B', [0xFF, 0x3F, 0x54, 0x3B, 0xC4, 0x44, 0x54, 0x33, 0x33, 0x5B, 0x2D, 0x5C, 0x44, 0x5C, 0xC4, 0xC5, 0xFC, 0x15, 0xFE, 0xC3, 0x44, 0x78, 0x88, 0x98, 0x44, 0x30, 0xFF, 0xFF, 0x00, 0xF8, 0x00])).tolist())

    # final example from: http://forums.sonicretro.org/index.php?showtopic=3482
    def testForumPost(self):
        self.assertEquals([0x54, 0x3B, 0xC4, 0x44, 0x54, 0x33, 0x33, 0x5B, 0x2D, 0x5C, 0x44, 0x5C, 0xC4, 0xC5, 0xC4, 0xC5, 0xC3, 0x44, 0x78, 0x88, 0x98, 0x44, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30], self.kos.decompress(array.array('B', [0xFF, 0x3F, 0x54, 0x3B, 0xC4, 0x44, 0x54, 0x33, 0x33, 0x5B, 0x2D, 0x5C, 0x44, 0x5C, 0xC4, 0xC5, 0xFC, 0x15, 0xFE, 0xC3, 0x44, 0x78, 0x88, 0x98, 0x44, 0x30, 0xFF, 0xFF, 0x00, 0xF8, 0x00])).tolist())
